// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type dnsredirectorSvcAddr struct {
	Addr uint32
	Port uint16
	_    [2]byte
}

// loadDnsredirector returns the embedded CollectionSpec for dnsredirector.
func loadDnsredirector() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DnsredirectorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dnsredirector: %w", err)
	}

	return spec, err
}

// loadDnsredirectorObjects loads dnsredirector and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*dnsredirectorObjects
//	*dnsredirectorPrograms
//	*dnsredirectorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDnsredirectorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDnsredirector()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dnsredirectorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnsredirectorSpecs struct {
	dnsredirectorProgramSpecs
	dnsredirectorMapSpecs
}

// dnsredirectorSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnsredirectorProgramSpecs struct {
	Connect4     *ebpf.ProgramSpec `ebpf:"connect4"`
	Getpeername4 *ebpf.ProgramSpec `ebpf:"getpeername4"`
}

// dnsredirectorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dnsredirectorMapSpecs struct {
	ServiceMapping *ebpf.MapSpec `ebpf:"service_mapping"`
}

// dnsredirectorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDnsredirectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnsredirectorObjects struct {
	dnsredirectorPrograms
	dnsredirectorMaps
}

func (o *dnsredirectorObjects) Close() error {
	return _DnsredirectorClose(
		&o.dnsredirectorPrograms,
		&o.dnsredirectorMaps,
	)
}

// dnsredirectorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDnsredirectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnsredirectorMaps struct {
	ServiceMapping *ebpf.Map `ebpf:"service_mapping"`
}

func (m *dnsredirectorMaps) Close() error {
	return _DnsredirectorClose(
		m.ServiceMapping,
	)
}

// dnsredirectorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDnsredirectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type dnsredirectorPrograms struct {
	Connect4     *ebpf.Program `ebpf:"connect4"`
	Getpeername4 *ebpf.Program `ebpf:"getpeername4"`
}

func (p *dnsredirectorPrograms) Close() error {
	return _DnsredirectorClose(
		p.Connect4,
		p.Getpeername4,
	)
}

func _DnsredirectorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed dnsredirector_bpfeb.o
var _DnsredirectorBytes []byte
